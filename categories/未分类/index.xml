<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>未分类 on lihui</title>
    <link>https://lihui.net/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/</link>
    <description>Recent content in 未分类 on lihui</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 07 Jan 2022 14:41:37 +0000</lastBuildDate>
    <atom:link href="https://lihui.net/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React JSX语法再实践</title>
      <link>https://lihui.net/react-jsx-re-action.html</link>
      <pubDate>Fri, 07 Jan 2022 14:41:37 +0000</pubDate>
      <guid>https://lihui.net/react-jsx-re-action.html</guid>
      <description>我们上一节封装了一个按钮，这一节我们继续理解封装的概念和了解封装组件需要注意的事项&#xA;首先我们回顾上一篇最后的代码，代码如下&#xA;我们最终调用的形式如下所示 Button({color:&amp;lsquo;blue&amp;rsquo;, text:&amp;lsquo;Confirm&amp;rsquo;}) 进行创建，其实我们发现 Button 和 button 或者和 em 一样都可以 作为一个元素存在，我们可以以 Button 为基础创建特定属性的按钮，将其称为自定义类型的元素 或者可以称为组件元素。和上一节相同，我们可以采用 JSON 结构来描述它&#xA;上述结构和我们文中的第一个结果，因此可以进一步的对其中的元素做封装&#xA;比如我们对通常使用警告的颜色为红色, 但是我们红色提示的文字可能不同，此处我们封装一个危险的按钮的示例&#xA;比如书中给了一个很好的示例&#xA;这是一个弹出的删除账户的组件，其中有文字以及确定和取消的按钮，删除账户的组件就完成了。&#xA;我们后面将继续介绍 JSX 的语法</description>
    </item>
    <item>
      <title>React 组件示例</title>
      <link>https://lihui.net/create-react-component.html</link>
      <pubDate>Thu, 06 Jan 2022 15:13:02 +0000</pubDate>
      <guid>https://lihui.net/create-react-component.html</guid>
      <description>上一节，我们使用 create-react-app 生成示例程序的代码，这一节我们详细介绍下如何进行修改代码&#xA;看了一些 React 的书籍，其实 React 使用 JSX 语法，将程序的模块化和抽象做的很好。&#xA;我们新建立的程序的目录如下&#xA;关于目录结构的表述我这里直接引用 Mozilla 的描述&#xA;目录 src 是我们花费时间最多的地方，因为它是我们 React 应用源码存放的目录。&#xA;目录 public 包含了开发应用时浏览器会读取的文件，其中最重要的就是 index.html。React 将目录 src 中的代码嵌入这个文件，从而浏览器才能运行此文件。 index.html 中的有些内容关乎 create-react-app 的运作，因此除非你知道自己在做什么样的修改，否则不建议编辑这个文件。当然，你可以修改 index.html 中的 </description>
    </item>
    <item>
      <title>如何搭建第一个 React 程序</title>
      <link>https://lihui.net/how-to-create-first-react-app.html</link>
      <pubDate>Wed, 05 Jan 2022 14:22:22 +0000</pubDate>
      <guid>https://lihui.net/how-to-create-first-react-app.html</guid>
      <description>最近在公司中的项目中是一个 React native 开发的程序，因此就有了这个文章，搭建第一个 React 的程序。&#xA;这个应该会很快写完，毕竟比较简单，这篇文章的目的还是尝试如何创建第一个React程序&#xA;学习一个事物，我认为最大限度的降低初学者的成本是最重要的，毕竟创造一个新的软件为了让其他人使用，而不是让做出来的软件自己都不用。&#xA;Mozilla 关于 JSX 语法的描述&#xA;由于 JSX 是 HTML 和 JavaScript 的结合，因此一些开发人员认为它很直观。其他人则说它的混合特性使它变得混乱。但是，一旦熟悉了它，它将使您能够更快，更直观地构建用户界面，并使其他人一眼就能更好地理解您的代码库。&#xA;本文分为下面几个方面 1. 环境预配置, 2. 创建并演示&#xA;1. 环境预配置 环境预配置采用 NodeJS 环境 详情可以参考 Mozilla 安装 NodeJS 环境配置 2. 创建并演示 安装完成 nodejs 后可以使用下列命令创建项目名称为 moz-todo-react 的 React 应用&#xA;在刚才的 terminal 中输入以下命令&#xA;会自动打开地址 http://localhost:3000/ , 效果如下&#xA;未来我们会有新的章节来介绍文章的内容以及如何使用 React 进行软件开发&#xA;实践与写作大约使用 40 分钟&#xA;遗留问题：&#xA;npm vs yarn 有什么不同，日常使用哪一个最好？ 参考文章&#xA;https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started</description>
    </item>
    <item>
      <title>[SpringBoot 指南] 如何开始 Springboot 之旅 实现自己第一个接口</title>
      <link>https://lihui.net/springboot-create-first-api.html</link>
      <pubDate>Sat, 01 Jan 2022 15:29:12 +0000</pubDate>
      <guid>https://lihui.net/springboot-create-first-api.html</guid>
      <description>书写时间 39m59s&#xA;预计发布时间 2022-01-01&#xA;这篇文章是 springboot 系列的第一篇文章，如何从零开始学习 Springboot.&#xA;我认为学习技术，追寻技术的本质没有任何问题，但是在上手技术的时候可能不需要了解太多的技术细节，首先了解如何使用，而后再想办法如何优化也不乏为一条快速学习和实践的道路。&#xA;本篇文章的主要思路是，通过实践最简单的 springboot 的项目，实现我们的第一个接口来叩响 Springboot 学习之门。&#xA;本章节分为两个部分 新建项目 和 书写第一个接口&#xA;新建项目 本篇文章采用 IDEA 创建 springboot 项目, IDEA 开发 Spring 项目有很多的优点，比如代码补全，代码优化，环境内置，还有很多的插件系统，可以大幅度地提高效率，推荐使用 IDEA 进行开发&#xA;1. 打开 IDEA 新建项目 2. 选择建立 Springboot 项目并填写项目信息 其中英文名称释义&#xA;Name: 项目名称&#xA;Location 代码位置&#xA;Type: 这里指的是项目的构建方式 选择 Maven 和 Gradle 在初期体验不到不同，此处我选择的是 Gradle&#xA;Group: 可以理解为项目组的名称，一般为域名的反写 比如域名是 exmaple.com 则 Group 的数值为 com.example&#xA;Project SDK: 这个很好理解 这个是软件开发的环境&#xA;Packaging : 打包的方式， Jar 与 War 的区别是 Jar 打包了运行环境， 直接 java -jar project.</description>
    </item>
    <item>
      <title>LeetCode刷题笔记</title>
      <link>https://lihui.net/leetcode-note.html</link>
      <pubDate>Mon, 01 Feb 2021 15:06:22 +0000</pubDate>
      <guid>https://lihui.net/leetcode-note.html</guid>
      <description>前言 距离上一次刷LeetCode 好长时间了, 当然上一次也没有刷完, 这次试着刷一遍LeetCode. 使用Java语言, 忽然感觉到有点手生, 需要多刷了. 趁着题目还不多(1956个了&amp;hellip;)&#xA;进度 | 完成情况 | # | 题名 | 题解 | 通过率 | 难度 | | | &amp;mdash;- | &amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; | &amp;mdash;&amp;ndash; | &amp;ndash; | | | :ok: | 1 | 两数之和 | 9671 | 50.0% | 简单 | | | | 2 | 两数相加 | 4776 | 39.4% | 中等 | | | | 3 | 无重复字符的最长子串 | 4717 | 36.</description>
    </item>
  </channel>
</rss>
